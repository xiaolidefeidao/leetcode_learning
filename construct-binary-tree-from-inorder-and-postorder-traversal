#https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, inorder, postorder):
        self.postorder, self.inorder = postorder, inorder
        return self.build(0, 0, len(postorder))

    def build(self,  ibegin, pbegin,size):
        if not size: return None
        root = TreeNode(self.postorder[pbegin+size-1])
        _index = self.inorder.index(self.postorder[pbegin+size-1])
        lsize = _index - ibegin
        rsize = size - 1 - lsize
        root.left = self.build( ibegin,pbegin, lsize)
        root.right = self.build( _index + 1,pbegin+lsize,rsize)
        return root
